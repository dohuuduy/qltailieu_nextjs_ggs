const { google } = require('googleapis');
require('dotenv').config({ path: '.env.local' });

const SPREADSHEET_ID = process.env.GOOGLE_SPREADSHEET_ID;
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n');
const GOOGLE_CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL;

const auth = new google.auth.GoogleAuth({
  credentials: {
    client_email: GOOGLE_CLIENT_EMAIL,
    private_key: GOOGLE_PRIVATE_KEY,
  },
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const sheets = google.sheets({ version: 'v4', auth });

async function setupSubDocumentsSheet() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o sheet t√†i li·ªáu con...');

    // T·∫°o sheet m·ªõi cho t√†i li·ªáu con
    await sheets.spreadsheets.batchUpdate({
      spreadsheetId: SPREADSHEET_ID,
      requestBody: {
        requests: [
          {
            addSheet: {
              properties: {
                title: 'tai_lieu_con',
                gridProperties: {
                  rowCount: 1000,
                  columnCount: 13
                }
              }
            }
          }
        ]
      }
    });

    console.log('‚úÖ ƒê√£ t·∫°o sheet "tai_lieu_con"');

    // Th√™m header cho sheet t√†i li·ªáu con
    const headers = [
      'id',
      'tai_lieu_cha_id', 
      'ten_tai_lieu_con',
      'mo_ta',
      'loai_tai_lieu',
      'trang_thai',
      'thu_tu',
      'nguoi_tao',
      'ngay_tao',
      'nguoi_cap_nhat',
      'ngay_cap_nhat',
      'url_file',
      'ghi_chu'
    ];

    await sheets.spreadsheets.values.update({
      spreadsheetId: SPREADSHEET_ID,
      range: 'tai_lieu_con!A1:M1',
      valueInputOption: 'RAW',
      requestBody: {
        values: [headers]
      }
    });

    console.log('‚úÖ ƒê√£ th√™m headers cho sheet t√†i li·ªáu con');

    // Th√™m d·ªØ li·ªáu m·∫´u
    const sampleData = [
      [
        '1_sub',
        '1', // ID t√†i li·ªáu cha
        'Bi·ªÉu m·∫´u ki·ªÉm tra ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m',
        'Form ki·ªÉm tra ch·∫•t l∆∞·ª£ng theo quy tr√¨nh chu·∫©n',
        'bieu_mau',
        'hieu_luc',
        '1',
        'Nguy·ªÖn VƒÉn A',
        '2024-01-15',
        'Nguy·ªÖn VƒÉn A',
        '2024-01-15',
        'https://drive.google.com/file/d/1abc123/view',
        'S·ª≠ d·ª•ng cho t·∫•t c·∫£ s·∫£n ph·∫©m'
      ],
      [
        '2_sub',
        '1', // ID t√†i li·ªáu cha
        'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng thi·∫øt b·ªã ƒëo',
        'H∆∞·ªõng d·∫´n chi ti·∫øt c√°ch s·ª≠ d·ª•ng c√°c thi·∫øt b·ªã ƒëo l∆∞·ªùng',
        'huong_dan',
        'hieu_luc',
        '2',
        'Nguy·ªÖn VƒÉn A',
        '2024-01-16',
        'Nguy·ªÖn VƒÉn A',
        '2024-01-16',
        '',
        'C·∫≠p nh·∫≠t theo thi·∫øt b·ªã m·ªõi'
      ],
      [
        '3_sub',
        '1', // ID t√†i li·ªáu cha
        'Checklist ki·ªÉm tra cu·ªëi ca',
        'Danh s√°ch ki·ªÉm tra c√°c h·∫°ng m·ª•c cu·ªëi ca l√†m vi·ªác',
        'checklist',
        'hieu_luc',
        '3',
        'Tr·∫ßn Th·ªã B',
        '2024-01-17',
        'Tr·∫ßn Th·ªã B',
        '2024-01-17',
        'https://drive.google.com/file/d/1def456/view',
        'Th·ª±c hi·ªán h√†ng ng√†y'
      ]
    ];

    await sheets.spreadsheets.values.update({
      spreadsheetId: SPREADSHEET_ID,
      range: 'tai_lieu_con!A2:M4',
      valueInputOption: 'RAW',
      requestBody: {
        values: sampleData
      }
    });

    console.log('‚úÖ ƒê√£ th√™m d·ªØ li·ªáu m·∫´u cho t√†i li·ªáu con');

    // Format header row
    await sheets.spreadsheets.batchUpdate({
      spreadsheetId: SPREADSHEET_ID,
      requestBody: {
        requests: [
          {
            repeatCell: {
              range: {
                sheetId: await getSheetId('tai_lieu_con'),
                startRowIndex: 0,
                endRowIndex: 1,
                startColumnIndex: 0,
                endColumnIndex: 13
              },
              cell: {
                userEnteredFormat: {
                  backgroundColor: {
                    red: 0.2,
                    green: 0.6,
                    blue: 1.0
                  },
                  textFormat: {
                    foregroundColor: {
                      red: 1.0,
                      green: 1.0,
                      blue: 1.0
                    },
                    bold: true
                  }
                }
              },
              fields: 'userEnteredFormat(backgroundColor,textFormat)'
            }
          }
        ]
      }
    });

    console.log('‚úÖ ƒê√£ format header row');
    console.log('üéâ Ho√†n th√†nh setup sheet t√†i li·ªáu con!');

  } catch (error) {
    console.error('‚ùå L·ªói khi setup sheet:', error);
    
    if (error.message?.includes('already exists')) {
      console.log('‚ÑπÔ∏è  Sheet "tai_lieu_con" ƒë√£ t·ªìn t·∫°i, b·ªè qua vi·ªác t·∫°o m·ªõi');
    } else {
      throw error;
    }
  }
}

async function getSheetId(sheetName) {
  const response = await sheets.spreadsheets.get({
    spreadsheetId: SPREADSHEET_ID
  });
  
  const sheet = response.data.sheets?.find(s => s.properties?.title === sheetName);
  return sheet?.properties?.sheetId || 0;
}

// Ch·∫°y script
setupSubDocumentsSheet()
  .then(() => {
    console.log('‚úÖ Script ho√†n th√†nh th√†nh c√¥ng!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Script th·∫•t b·∫°i:', error);
    process.exit(1);
  });